@using DataAccessLibrary.FileRepo;
@using DataAccessLibrary.Models;
@using DataAccessLibrary.FolderRepo;
@inject IFolderRepository folderRepo;
@inject IFileRepository fileRepo;

@if (CurrentFolder.SubFolders != null && CurrentFolder.SubFolders.Count() > 0)
{
    <table class="folder_table">
        <thead>
            <tr>
                <th class="folder_th">Folder name</th>
                <th class="folder_th">SubFolders</th>
                <th class="folder_th">Files</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var folder in CurrentFolder.SubFolders)
            {
                <tr class="folder_tr" @onclick="() => SelectFolder(folder)">
                    <td class="folder_tr">@folder.Name</td>
                    <td class="folder_tr">@folder.SubFolders.Count()</td>
                    <td class="folder_tr">@folder.Files.Count()</td>

                </tr>
            }
        </tbody>
    </table>
}

@if (SelectedFolderFiles != null && SelectedFolderFiles.Count() > 0)
{
    <table class="file_table">
        <thead>
            <tr>
                <th class="file_th">File name</th>
                <th class="file_th">Description</th>
                <th class="file_th">Topics</th>
                <th class="file_th">Creation date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in SelectedFolderFiles)
            {
                <tr class="library_tr">
                    <td class="file_td">@file.Title</td>
                    <td class="file_td">@file.Description</td>
                    <td class="file_td">
                        @foreach (TopicEntity topic in file.Topics)
                        {
                            <li>@topic.Title</li>
                        }
                    </td>
                    <td class="file_td">@file.CreationDate.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (SelectedFolder != null)
{
    <LibraryComp CurrentFolder="@SelectedFolder" OnFolderSelected="SelectFolder" />

}

@code {
    [Parameter]
    public Folder CurrentFolder { get; set; }

    [Parameter]
    public EventCallback<Folder> OnFolderSelected { get; set; }
    private Folder SelectedFolder { get; set; }
    private List<UserFile> SelectedFolderFiles { get; set; } = new List<UserFile>();

    protected override async Task OnInitializedAsync()
    {
        SelectedFolderFiles = await fileRepo.GetFilesForFolderAsync(CurrentFolder.Id);
    }

    public async Task SelectFolder(Folder folder)
    {
        SelectedFolder = await folderRepo.GetFolder(folder.Id);
        SelectedFolderFiles = await fileRepo.GetFilesForFolderAsync(SelectedFolder.Id);
        await OnFolderSelected.InvokeAsync(SelectedFolder);
        //navigationManger.NavigateTo($"file/{folder}");
    }
}
