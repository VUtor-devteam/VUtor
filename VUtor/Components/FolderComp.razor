@using DataAccessLibrary.Models;
@using DataAccessLibrary.FolderRepo;

@inject IFolderRepository folderRepo;

@if(CurrentFolder == SelectedFolder || CurrentFolder.ParentFolderId == null){
    <div>
        <div>
            @if (CurrentFolder.SubFolders != null && CurrentFolder.SubFolders.Any())
            {
                @if (CurrentFolder.SubFolders.Count() == 1)
                {
                    <div>
                        <label class="custom_small_text" for="SubFoldersIdOne">Choose a subfolder</label>
                    </div>
                    <div>
                        <button style="margin-bottom: 10px" type="button" class="round_corners btn btn-outline-secondary" @onclick="() => SelectFolder(CurrentFolder.SubFolders.First())">
                            @CurrentFolder.SubFolders.First().Name
                        </button>
                    </div>
                }
                else
                {
                    <div>
                        <label class="custom_small_text" for="SubFoldersIdSelect">Choose a subfolder</label>
                    </div>
                    <select style="margin-bottom: 10px" class="form-control-sm" @onchange="SubFolderSelected">
                        <option value="">...</option>
                        @foreach (var subFolder in CurrentFolder.SubFolders)
                        {
                            <option class="custom_small_text" value="@subFolder.Id">@subFolder.Name</option>
                        }
                    </select>
                }
            }
            <div>
                <input style="margin-bottom: 10px" type="text" @bind="newSubFolderName" placeholder="New sub-folder name" />
            </div>
            <div>
                <button style="margin-bottom: 10px; width: 120px; padding: 0 10px 0 10px" type="button" class="round_corners btn btn-outline-secondary" @onclick="CreateNewSubFolder">Create</button>
            </div>
            <div>
                <button style="margin-bottom: 10px; width: 200px; padding: 0 10px 0 10px" type="button" class="round_corners btn btn-outline-secondary" @onclick="GoBackAFolder">Go back one folder</button>
            </div>
        </div>
    </div>
    @if (SelectedFolder != null && SelectedFolder != CurrentFolder)
    {
        <FolderComp CurrentFolder="@SelectedFolder" OnFolderSelected="SelectFolder" />

    }
}
@if(errors.Count() > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach(var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code {
    [Parameter]
    public Folder CurrentFolder { get; set; }

    [Parameter]
    public EventCallback<Folder> OnFolderSelected { get; set; }
    private Folder SelectedFolder { get; set; }
    private List<string> errors = new();
    private string newSubFolderName;

    private async Task SelectFolder(Folder folder)
    {
        if (folder != null)
        {
            if (folder == CurrentFolder)
            {
                SelectedFolder = null;
            }
            else
            {
                SelectedFolder = folder;
            }
            await OnFolderSelected.InvokeAsync(SelectedFolder);
        }
    }
    private async Task GoBackAFolder()
    {
        try{
            if (SelectedFolder == null)
            {
                if (CurrentFolder.ParentFolderId == null)
                {
                    SelectedFolder = null;
                    await OnFolderSelected.InvokeAsync(SelectedFolder);
                }
                else
                {
                    var previousFolder = await folderRepo.GetFolder(CurrentFolder.ParentFolderId.Value);
                    SelectedFolder = previousFolder;
                    await OnFolderSelected.InvokeAsync(SelectedFolder);
                }
            }
            else
            {
                if (SelectedFolder.ParentFolderId != null)
                {
                    var previousFolder = await folderRepo.GetFolder(SelectedFolder.ParentFolderId.Value);
                    SelectedFolder = previousFolder;
                    await OnFolderSelected.InvokeAsync(SelectedFolder);
                }
                else
                {
                    SelectedFolder = null;
                    await OnFolderSelected.InvokeAsync(SelectedFolder);
                }
            }
        }catch(Exception ex){
            errors.Add("Error selecting folder.");
        }
    }

    private async Task SubFolderSelected(ChangeEventArgs e)
    {
        try
        {
            var selectedSubFolderId = int.Parse(e.Value.ToString());
            // Find the selected subfolder by ID...
            var selectedSubFolder = await folderRepo.GetFolder(selectedSubFolderId);
            SelectedFolder = selectedSubFolder;
            await OnFolderSelected.InvokeAsync(SelectedFolder);
        }
        catch(Exception ex){
            errors.Add("Error selecting subfolder.");
        }
    }

    private async Task CreateNewSubFolder()
    {
        try
        {
            if (!string.IsNullOrEmpty(newSubFolderName))
            {
                Console.WriteLine(CurrentFolder.Name);
                await folderRepo.CreateSubFolder(newSubFolderName, CurrentFolder.Id);
                await UpdateSubFolderList();
            }
            newSubFolderName = string.Empty;
        }
        catch(Exception ex){
            errors.Add("Error creating new subfolder.");
        }
    }

    private async Task UpdateSubFolderList()
    {
        try
        {
            CurrentFolder = await folderRepo.GetFolder(CurrentFolder.Id);
        }
        catch (Exception ex)
        {
            errors.Add("Error updating subfolder list.");
        }
    }
}