
@page "/profile"

@using DataAccessLibrary.Data
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity;

@inject IGenericRepository<TopicEntity> repoGenericTopics
@inject IProfileRepository repoProfiles
@inject ApplicationDbContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ProfileEntity> userManager
@inject RatingRepository ratingRepo

@using DataAccessLibrary.Data
@using DataAccessLibrary.GenericRepo;
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using DataAccessLibrary.RatingRepo;
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity;

@inject IGenericRepository<TopicEntity> repoGenericTopics
@inject IProfileRepository repoProfiles
@inject ApplicationDbContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ProfileEntity> userManager
@inject RatingRepository ratingRepo

<PageTitle>Profile</PageTitle>
<h1>Profile</h1>

@if (userProfile != null)
{
        <div class="edit_container">
            <div class="edit_row_container">
                <div class="edit_container">
                    <div> 
                        <label class="specifications"> Name:</label>
                        <div class="mb-2">
                        <label>@userProfile.Name</label>
                        </div>
                    </div>

                    <div>
                        <label class="specifications">Surname:</label>
                        <div class="mb-2">
                        <label>@userProfile.Surname</label>
                        </div>
                    </div>
                </div>

                <img class="round_img" src="css/Images/user.jpg" alt="Default user image">
            </div>

            <div class="edit_row_container">
                <div>
                    <label class="specifications">Course:</label>
                    <div class="mb-2">
                    <label>@userProfile.CourseInfo.GetName()</label>
                    </div>
                </div>

                <div>
                    <label class="specifications">Academic year:</label>
                    <div class="mb-2">
                    <label>@userProfile.CourseInfo.GetYear()</label>
                    </div>
                </div>
            </div>

            <div class="edit_row_container">
                <div>
                    <label class="specifications">Subject you want to learn:</label>
                    <div class="mb-2">
                    @foreach (var topic in @userProfile.TopicsToLearn)
                        {
                            <li>@topic.Title</li>
                        }

                        <!--<label>Subject you want to learn</label>-->
                    </div>
                </div>

                <div>
                    <label class="specifications">Subject you want to teach:</label>
                    <div class="mb-2">
                    @foreach (var topic in @userProfile.TopicsToTeach)
                        {
                            <li>@topic.Title</li>
                        }
                        <!--<label>Subject you want to teach</label>-->
                    </div>
                </div>
            </div>
            <div>
                <div>
                    <label class="specifications">How to reach me:</label>
                @if (!string.IsNullOrEmpty(userProfile.FacebookProfile))
                {
                    <div>
                        <label>Facebook:</label>
                        <a href="@GetSocialMediaLink("Facebook", userProfile.FacebookProfile)" target="_blank">@userProfile.FacebookProfile</a>
                    </div>
                }

                @if (!string.IsNullOrEmpty(userProfile.InstagramProfile))
                {
                    <div>
                        <label>Instagram:</label>
                        <a href="@GetSocialMediaLink("Instagram", userProfile.InstagramProfile)" target="_blank">@userProfile.InstagramProfile</a>
                    </div>
                }

                @if (!string.IsNullOrEmpty(userProfile.XProfile))
                {
                    <div>
                        <label>X Profile:</label>
                        <a href="@GetSocialMediaLink("X", userProfile.XProfile)" target="_blank">@userProfile.XProfile</a> <!-- Modify as needed -->
                    </div>
                }
                </div>
                <div>
                    <label class="specifications"> Rating:</label>
                    <div class="mb-2">
                    <label>@averageRating.ToString("0.##")</label>
                    </div>
                </div>
            </div>
            <div class="mb-2">
                <a id="manage" class="nav-link text-dark" href="/Identity/Account/Manage" title="Manage">Edit</a>
            </div>
        </div>
}

@code {

    [Parameter]
    public string email { get; set; }

    public double averageRating { get; set; }

    private ProfileEntity userProfile;

    #region Tasks

    // Actions executed on page initialization
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var email = user.Identity.Name; // Assuming the email is used as the username
            userProfile = await repoProfiles.GetProfileByEmailAsync(email);
        }

        averageRating = await ratingRepo.GetAverageRatingAsync(userProfile.Id); // Ensure userProfile.Id is a string

    }

    private string GetSocialMediaLink(string platform, string handle)
    {
        // Modify this logic based on how you store the handles
        return platform switch
        {
            "Facebook" => $"https://www.facebook.com/{handle}",
            "Instagram" => $"https://www.instagram.com/{handle}",
            "X" => $"https://www.twitter.com/{handle}",
            _ => handle,
        };
    }
    #endregion

    #region Fields

    private List<TopicEntity> _topics = new List<TopicEntity>();
    private List<ProfileEntity> _topicsDisplay = new List<ProfileEntity>();

    private List<ProfileEntity> _users = new List<ProfileEntity>();
    private List<ProfileEntity> _usersDisplay = new List<ProfileEntity>();

    private string? _insertUserMessage;
    private string? _resultInsert;
    private string? _filterListMessage;
    private string? _resultFilter;

    #endregion

    #region Models

    // UserModel
    public class UserModel
    {
        // Personal data
        public string? Name { get; set; }
        public string? Surname { get; set; }

        // Course info
        public int CourseName { get; set; }
        public int CourseYear { get; set; }

        // Topics
        public int TopicToLearnId { get; set; }
        public int TopicToTeachId { get; set; }
    }

    private UserModel? NewUser = new UserModel();
    private UserModel? Filter = new UserModel();

    #endregion

}
