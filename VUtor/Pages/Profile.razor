
@page "/profile/{email}"

@using DataAccessLibrary.Data
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity;

@inject IGenericRepository<TopicEntity> repoGenericTopics
@inject IProfileRepository repoProfiles
@inject ApplicationDbContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Profile</PageTitle>
<h1>Profile</h1>

@foreach (var user in _usersDisplay)
{
    //if (@user.Email != null && @user.Email.Trim().Equals(@email.Trim(), StringComparison.OrdinalIgnoreCase))
    {
        <div class="edit_container">
            <div class="edit_row_container">
                <div class="edit_container">
                    <div> 
                        <label class="specifications">Name:</label>
                        <div class="mb-2">
                            <label>@user.Name</label>
                        </div>
                    </div>

                    <div>
                        <label class="specifications">Surname:</label>
                        <div class="mb-2">
                            <label>@user.Surname</label>
                        </div>
                    </div>
                </div>

                <img class="round_img" src="css/Images/user.jpg" alt="Default user image">
            </div>

            <div class="edit_row_container">
                <div>
                    <label class="specifications">Course:</label>
                    <div class="mb-2">
                        <label>@user.CourseInfo.GetName()</label>
                    </div>
                </div>

                <div>
                    <label class="specifications">Academic year:</label>
                    <div class="mb-2">
                        <label>@user.CourseInfo.GetYear()</label>
                    </div>
                </div>
            </div>

            <div class="edit_row_container">
                <div>
                    <label class="specifications">Subject you want to learn:</label>
                    <div class="mb-2">
                        @foreach (var topic in user.TopicsToLearn)
                        {
                            <li>@topic.Title</li>
                        }

                        <!--<label>Subject you want to learn</label>-->
                    </div>
                </div>

                <div>
                    <label class="specifications">Subject you want to teach:</label>
                    <div class="mb-2">
                        @foreach (var topic in user.TopicsToTeach)
                        {
                            <li>@topic.Title</li>
                        }
                        <!--<label>Subject you want to teach</label>-->
                    </div>
                </div>
            </div>
            <div class="mb-2"></div>

            @if (@email == @authenticatedUserEmail){
            <div>
                 <button @onclick="NavigateToManage" type="submit" class="round_corners edit">Edit profile
                        <a href="Identity/Account/Manage">!</a>
                 </button>
            </div>
            }

        </div>
    }

}

@code {

    [Parameter]
    public string email { get; set; }

    private string authenticatedUserEmail;

    private async Task GetUserData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            authenticatedUserEmail = user.Identity.Name;
        }
    }

    private void NavigateToManage()
    {
        NavigationManager.NavigateTo("Identity/Account/Manage");
    }


    #region Fields

    private List<TopicEntity> _topics = new List<TopicEntity>();
    private List<ProfileEntity> _topicsDisplay = new List<ProfileEntity>();

    private List<ProfileEntity> _users = new List<ProfileEntity>();
    private List<ProfileEntity> _usersDisplay = new List<ProfileEntity>();

    private string? _insertUserMessage;
    private string? _resultInsert;
    private string? _filterListMessage;
    private string? _resultFilter;

    #endregion

    #region Models

    // UserModel
    public class UserModel
    {
        // Personal data
        public string? Name { get; set; }
        public string? Surname { get; set; }

        // Course info
        public int CourseName { get; set; }
        public int CourseYear { get; set; }

        // Topics
        public int TopicToLearnId { get; set; }
        public int TopicToTeachId { get; set; }
    }

    private UserModel? NewUser = new UserModel();
    private UserModel? Filter = new UserModel();

    #endregion

    #region Tasks

    // Actions executed on page initialization
    protected override async Task OnInitializedAsync()
    {
        _users = await repoProfiles.LoadData(); // loads table of type ProfileEntity into _users
        _usersDisplay = _users; // stores reference to _users for display purposes

        _topics = await context.Topics.ToListAsync(); // loads table of Topics to choose from
        _topicsDisplay = context.Profiles.Include(p => p.TopicsToLearn).Include(p => p.TopicsToTeach).ToList(); // allows topics to be referenced
                                                                                                                // when attempting to display
        await GetUserData();
    }
    #endregion
   
}
