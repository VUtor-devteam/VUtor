@page "/dashboard"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using DataAccessLibrary.Models
@using DataAccessLibrary.MatchmakingServ
@using System.Security.Claims
@using System.Diagnostics;
@using DataAccessLibrary

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMatchmakingService MatchmakingService
@inject NavigationManager navigationManger
@inject IProfileRepository repoProfiles
@inject StudyGroupRepository studyGroupRepo

<PageTitle>Dashboard</PageTitle>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Style to create two columns */
        .column {
            float: left;
            width: 50%; /* Adjust the width based on your needs */
            padding: 10px;
        }

        /* Clear floats after the columns */
        .row:after {
            content: "";
            display: table;
            clear: both;
        }
    </style>
    <title>Dashboard</title>
</head>
<body>

    <div class="row">
        <div class="column">
            <h2>Possible tutors for you:</h2>
            @if (MatchedTutors == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (MatchedTutors.Any())
            {
                <ul>
                    @foreach (var tutor in MatchedTutors)
                    {
                        <li>
                            <button @onclick="() => GoToProfile(tutor.Id)" style="border: none; background-color: transparent; cursor: pointer;
                                color: darkblue; text-decoration: underline;">
                                @tutor.Name @tutor.Surname
                            </button>

                            <ul>
                                @foreach (var topic in tutor.TopicsToTeach)
                                {
                                    if (loggedInUser.TopicsToLearn.Any(userTopic => userTopic.Title == topic.Title))
                                    {
                                        <li>@topic.Title</li>
                                    }
                                }
                            </ul>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No possible tutors found.</p>
            }
        </div>

        <div class="column">
            <h2>Possible learners for you:</h2>
            @if (MatchedLearners == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (MatchedLearners.Any())
            {
                <ul>
                    @foreach (var learner in MatchedLearners)
                    {
                        <li>
                            <button @onclick="() => GoToProfile(learner.Id)" style="border: none; background-color: transparent; cursor: pointer;
                                color: darkblue; text-decoration: underline;">
                                @learner.Name @learner.Surname
                            </button>

                            <ul>
                                @foreach (var topic in learner.TopicsToLearn)
                                {
                                    if (loggedInUser.TopicsToTeach.Any(userTopic => userTopic.Title == topic.Title))
                                    {
                                        <li>@topic.Title</li>
                                    }
                                }
                            </ul>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No possible learners found.</p>
            }
        </div>
    </div>

    <div class="row">
        <div class="column">
            <h2>Files for you:</h2>
            @if (FilesForLearning == null)
            {
                <p><em>Loading...</em></p>
    
            }
            else if (FilesForLearning.Any())
            {
                <ul>
                    @foreach (var file in FilesForLearning)
                    {
                        <li>
                            <span style="font-weight: bold;">@file.Title</span> - @file.Description

                            <p style="margin-bottom: 0;">The file is about these topics: </p>
                            <ul>
                                @foreach (var topic in file.Topics)
                                {
                                    <li>@topic.Title</li>
                                }
                            </ul>
                        </li>
                    }
                </ul>
                <button class="round_corners btn btn-outline-secondary" @onclick="() => GoToLibrary()">More...</button>
            }
            else
            {
                <p>No relevant files found.</p>
                <button class="round_corners btn btn-outline-secondary" @onclick="() => GoToLibrary()">More...</button>
            }
        </div>
    
        <div class="column">
            <h2>Study groups:</h2>
            @if (recentStudyGroups == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (recentStudyGroups.Any())
            {
                <ul>
                     @foreach (var group in recentStudyGroups)
                     {
                         <li>
                             <p style="text-decoration: underline; margin-bottom: 0;">@group.Subject</p>
                             @(group.GroupPlace ? "Live" : "Online") - @group.GroupDate
                             <p style="margin-bottom: 0;">Current members' count: @group.MemberNumber</p>
                             <button class="round_corners btn btn-outline-secondary" @onclick="()=> JoinStudyGroup(group.Id)">Join This Study Group</button>
                             <button class="round_corners btn btn-outline-secondary" @onclick="()=> LeaveStudyGroup(group.Id)">Leave This Study Group</button>
                         </li>
                     }
                </ul>
                <button class="round_corners btn btn-outline-secondary" @onclick="() => GoToStudyGroups()">More...</button>
            }
            else
            {
                <p>No recent study groups found.</p>
                <button class="round_corners btn btn-outline-secondary" @onclick="() => GoToStudyGroups()">More...</button>
            }
        </div>
    </div>

</body>
</html>

@code {
    private ProfileEntity loggedInUser;
    private List<ProfileEntity> MatchedTutors { get; set; }
    private List<ProfileEntity> MatchedLearners { get; set; }
    private List<UserFile> FilesForLearning { get; set; }
    private List<DataAccessLibrary.Models.StudyGroup> recentStudyGroups { get; set; }
    private ProfileEntity visiterProfile;
    private List<(DataAccessLibrary.Models.StudyGroup studyGroup, bool isMember)> studyGroupsWithMembership;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var email = user.Identity.Name; // Assuming the email is used as the username
            loggedInUser = await repoProfiles.GetProfileByEmailAsync(email);
        }

        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        MatchedTutors = await MatchmakingService.FindTutorsAsync(userId) ?? new List<ProfileEntity>();

        MatchedLearners = await MatchmakingService.FindLearnersAsync(userId) ?? new List<ProfileEntity>();

        FilesForLearning = await MatchmakingService.GetFilesForTopicsAsync(userId) ?? new List<UserFile>();

        recentStudyGroups = MatchmakingService.GetRecentStudyGroups(5);
    }

    private async Task GoToProfile(string id)
    {
        navigationManger.NavigateTo($"profile/{id}");
    }

    private async Task JoinStudyGroup(int studyGroupId)
    {
        var userId = await GetUserId();
        await studyGroupRepo.AddMemberAsync(studyGroupId, userId);
        await UpdateMemberCount(studyGroupId);
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
    }

    private async Task LeaveStudyGroup(int studyGroupId)
    {
        var userId = await GetUserId();
        await studyGroupRepo.RemoveMemberAsync(studyGroupId, userId);
        await UpdateMemberCount(studyGroupId);
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
    }

    private async Task UpdateMemberCount(int studyGroupId)
    {
        var memberCount = await studyGroupRepo.GetMemberCountAsync(studyGroupId);
        var studyGroup = await studyGroupRepo.GetStudyGroupByIdAsync(studyGroupId);
        if (studyGroup != null)
        {
            studyGroup.MemberNumber = memberCount;
            await studyGroupRepo.UpdateStudyGroupAsync(studyGroup);
        }
    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var email = user.Identity.Name; // Assuming the email is used as the username
            visiterProfile = await repoProfiles.GetProfileByEmailAsync(email);
        }

        return visiterProfile.Id;
    }

    private void GoToLibrary()
    {
        navigationManger.NavigateTo("/library");
    }

    private void GoToStudyGroups()
    {
        navigationManger.NavigateTo("/studygroups");
    }
}
