@page "/uploadfiles"

@using DataAccessLibrary.Data
@using DataAccessLibrary.FileRepo;
@using DataAccessLibrary.FolderRepo;
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore
@using VUtor.Components;



@inject IConfiguration config 
@inject ApplicationDbContext context
@inject UserManager<ProfileEntity> userManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFileRepository fileRepo
@inject IFolderRepository folderRepo



<h3>UploadFiles</h3>

<EditForm Model="@uploadFileModel"  OnSubmit="SubmitForm">
    <div>
        <label for="Title">Enter resource title</label>
        <InputText id="title" class="form-control" @bind-Value="uploadFileModel.Title"></InputText>
    </div>
    <div>
        <label for="Description">Enter a short description</label>
        <InputText id="description" class="form-control" @bind-Value="uploadFileModel.Description"></InputText>
    </div>
    <div>
        <label for="TopicId">Choose topic</label>
            <select id="topics" class="form-control" @onchange="UpdateTopicsId">
                <option value="">Select a topic...</option>
                @foreach (var topic in topicList)
                {
                    <option value="@topic.Id">@topic.Title</option>
                }
            </select>
            <span asp-validation-for="Input.TopicsToTeach" class="text-danger"></span>
    </div>

    <div>
        <label>Selected Topics:</label>
            @if (uploadFileModel.TopicsId != null)
            {
                @foreach (var topicId in uploadFileModel.TopicsId)
                {
                    var topic = topicList.First(t => t.Id == topicId);
                    <li>@topic.Title <button @onclick="() => RemoveTopic(topicId)">X</button></li>
                }
            }
    </div>

    <div>
        <label for="FoldersId">Choose where to store</label>
        <div>
            @if(selectedFolder != null){
                <p>@selectedFolder.Path</p>
            }
        </div>
    <div>
        @if(selectedFolder == null){
            <select @onchange="FolderSelected">
                @if (folderList != null)
                {
                    foreach (var folder in folderList)
                    {
                        <option value="@folder.Id">@folder.Name</option>
                    }
                }
            </select>
        <div>
                <input type="text" @bind="newFolderName" placeholder="New folder name" />
                <button @onclick="CreateNewFolder">Create New Folder</button>
        </div>
        }else{
            <FolderComp CurrentFolder="@selectedFolder" OnFolderSelected="HandleFolderSelected"/>
        }
    </div>
    </div>
    <div>
        <label for="File">Upload your file</label>
        <InputFile OnChange="@LoadFiles" class="form-control"/>
    </div>
    <button @onclick="CaptureFile" class="btn btn-primary mt-3" type="submit">Upload</button>
</EditForm>


@if(errors.Count() > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach(var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@code {
    private UploadFileModel uploadFileModel = new UploadFileModel();
    private List<TopicEntity> topicList;
    private List<string> errors = new();
    private Folder selectedFolder;
    private IBrowserFile? file;
    private List<Folder> folderList;
    private ProfileEntity? profile;
    private string newFolderName;

    public class UploadFileModel(){
        public string Title { get; set; }
        public string? Description { get; set; }
        public List<int> TopicsId { get; set; } = new List<int>();
    }

    // LOADING DATA FOR PAGE AND UPLOADING ACTIONS -----------------------------------------
    protected override void OnInitialized()
    {
        topicList = context.Topics.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        folderList = await folderRepo.GetFolders();
        folderList = folderList.Where(e => e.ParentFolderId == null).ToList();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            profile = await userManager.GetUserAsync(user);
        }
    }
    // LOADING DATA FOR PAGE AND UPLOADING ACTIONS -----------------------------------------


    // FOLDER SELECTING/CREATING SYSTEM ---------------------------------------------------
    private async Task FolderSelected(ChangeEventArgs e)
    {
        var selectedFolderId = int.Parse(e.Value.ToString());
        // Find the selected folder by ID...
        selectedFolder = await folderRepo.GetFolder(selectedFolderId);
    }

    private async Task CreateNewFolder()
    {
        if (!string.IsNullOrEmpty(newFolderName))
        {
            await folderRepo.CreateFolder(newFolderName);
            await UpdateFolderList();
        }
        newFolderName = string.Empty;
    }
    private void HandleFolderSelected(Folder folder)
    {
        selectedFolder = folder;
    }

    private async Task UpdateFolderList()
    {
        folderList = await folderRepo.GetFolders();
    }
    // FOLDER SELECTING/CREATING SYSTEM ---------------------------------------------------

    private void UpdateTopicsId(ChangeEventArgs e)
    {
        var selectedOption = int.Parse(e.Value.ToString());
        if (!uploadFileModel.TopicsId.Contains(selectedOption))
        {
            uploadFileModel.TopicsId.Add(selectedOption);
        }
    }

    private void RemoveTopic(int topicId)
    {
        uploadFileModel.TopicsId.Remove(topicId);
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task CaptureFile()
    {
        if(file == null)
        {
            errors.Add("No file was loaded.");
        }

        try
        {
            await fileRepo.UploadFileAsync(file, file.Name, uploadFileModel.Title, uploadFileModel.Description, uploadFileModel.TopicsId, selectedFolder.Id, profile.Id);
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }
        Console.WriteLine(selectedFolder.Path);
        uploadFileModel.Title = String.Empty;
        uploadFileModel.Description = String.Empty;
        uploadFileModel.TopicsId.Clear();
        selectedFolder = null;

    }

    private async Task SubmitForm()
    {
        errors.Clear();
    }

}



