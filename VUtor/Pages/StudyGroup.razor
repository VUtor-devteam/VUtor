@page "/studygroups"

@using DataAccessLibrary.Data
@using DataAccessLibrary.GenericRepo;
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity;

@inject IGenericRepository<TopicEntity> repoGenericTopics
@inject IProfileRepository repoProfiles
@inject ApplicationDbContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ProfileEntity> userManager
@inject StudyGroupRepository studyGroupRepo

@inject IJSRuntime JS;
@inject IConfiguration config


<h1>Study Groups</h1>

<div class="row">
    <div calss="col-lg-12"> 
        <button type="button" @onclick='eventArgs=>ShowModal("exampleModalCenter")' class="round_corners long btn btn-outline-secondary" data-toggle="modal" data-target="#exampleModalCenter">
            Create your own study group
        </button>
    </div>

    <div calss="col-lg-12">
        <!-- Modal -->
        <div class="modal fade show" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true" style="display:none; background: #00000080">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div>
                        <div class="publication gray_text">
                            New study group
                        </div>
                        <button type="button" @onclick='eventargs => HideModal("exampleModalCenter")' class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="form-floating mb-3"></div>
                    <div class="modal-body full">
                        <EditForm Model="@studyGroup" OnValidSubmit="@HandleValidSubmit">
                            <div>
                                <div class="edit_row_container mb-2">
                                    <div class="form-group mb-2 gray_text">
                                        <label for="groupDate">Group Date:</label>
                                        <InputDate id="groupDate" class="form-control round_corners" @bind-Value="@studyGroup.GroupDate" />
                                    </div>
                                    <div class="form-group mb-2 gray_text">
                                        <label for="groupPlace">Group Place:</label>
                                        <InputSelect id="groupPlace" class="form-control round_corners" @bind-Value="@studyGroup.GroupPlace" placeholder="Group place">
                                            <option value="true">Live</option>
                                            <option value="false">Online</option>
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="edit_row_container mb-2">
                                    <div class="form-group mb-2">
                                        <InputText id="subject" class="form-control round_corners" @bind-Value="@studyGroup.Subject" placeholder="Subject"/>
                                    </div>
                                    <div class="form-group mb-2">
                                        <InputText id="creatorId" class="form-control round_corners" @bind-Value="@studyGroup.CreatorId" placeholder="Creator ID" />
                                    </div>
                                </div>
                                <div class="form-floating mb-2 description">
                                    <textarea @bind="@studyGroup.Description" type="text" name="filter" class="description" placeholder="Enter a description" rows=" 10" cols="50" />
                                </div>
                            </div>

                            <div class="modal-footer edit_row_container">
                                <button type="submit" @onclick='eventargs => SaveModal("exampleModalCenter")' class="round_corners edit" data-dismiss="modal">Save</button>
                                <button type="button" @onclick='eventargs => HideModal("exampleModalCenter")' class="round_corners edit" data-dismiss="modal">Close</button>
                            </div>
                        </EditForm>


                    </div>
                </div>
            </div>
        </div>
    </div>


</div>

@* --------------------------------------------------------------*@

@if (studyGroups == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="library_table">
        <thead>
            <tr>
                <th class="library_th">Creator ID</th>
                <th class ="library_th">Meeting Date</th>
                <th class="library_th">Meeting Place</th>
                <th class="library_th">Subject</th>
                <th class="library_th">Member Count</th>
                <th class="library_th">Become member</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var (group, isMember) in studyGroupsWithMembership)
            {
                <tr class="library_tr tooltip">
                    <td class="library_td">@group.CreatorId</td>
                    <td class="library_td">@(DateOnly.FromDateTime(group.GroupDate))</td>
                    <td class="library_td">@(group.GroupPlace ? "Live" : "Online")</td>
                    <td class="library_td">@group.Subject</td>
                    <td class="library_td">@group.MemberNumber</td>
                    <td class="library_td">
                        @if (isMember)
                        {
                            <button class="round_corners btn btn-outline-secondary" @onclick="()=> LeaveStudyGroup(group.Id)">Leave Group</button>
                        }
                        else
                        {
                            <button class="round_corners btn btn-outline-secondary" @onclick="()=> JoinStudyGroup(group.Id)">Join This Study Group</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DataAccessLibrary.Models.StudyGroup> studyGroups;
    private List<(DataAccessLibrary.Models.StudyGroup studyGroup, bool isMember)> studyGroupsWithMembership;
    string userId = "null";

    private ProfileEntity visiterProfile;

    protected override async Task OnInitializedAsync()
    {
        studyGroups = await studyGroupRepo.GetAllStudyGroupsAsync();
        userId = await GetUserId(); // Use await to get the result of the asynchronous method
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
    }

    private async Task JoinStudyGroup(int studyGroupId)
    {
        var userId = await GetUserId();
        await studyGroupRepo.AddMemberAsync(studyGroupId, userId);
        await IncrementMemberCount(studyGroupId);
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
    }

    private async Task LeaveStudyGroup(int studyGroupId)
    {
        var userId = await GetUserId();
        await studyGroupRepo.RemoveMemberAsync(studyGroupId, userId);
        await DecrementMemberCount(studyGroupId);
        // Refresh the list or UI as needed
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
    }

    private async Task IncrementMemberCount(int studyGroupId)
    {
        var studyGroup = await studyGroupRepo.GetStudyGroupByIdAsync(studyGroupId);
        if (studyGroup != null)
        {
            studyGroup.MemberNumber++;
            await studyGroupRepo.UpdateStudyGroupAsync(studyGroup);
        }
    }

    private async Task DecrementMemberCount(int studyGroupId)
    {
        var studyGroup = await studyGroupRepo.GetStudyGroupByIdAsync(studyGroupId);
        if (studyGroup != null && studyGroup.MemberNumber > 0)
        {
            studyGroup.MemberNumber--;
            await studyGroupRepo.UpdateStudyGroupAsync(studyGroup);
        }
    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var email = user.Identity.Name; // Assuming the email is used as the username
            visiterProfile = await repoProfiles.GetProfileByEmailAsync(email);

        }

        return visiterProfile.Id;

    }
    @* --------------------------MODULE------------------------------------*@

    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender != null)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
        }
    }

    protected async void ShowModal(string elementID)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("showModal", elementID);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
            await module.InvokeAsync<string>("showModal", elementID);   //--JS function
        }
    }

    protected async void HideModal(string elementID)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("HideModal", elementID);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
            await module.InvokeAsync<string>("HideModal", elementID);   //--JS function
        }
    }

    protected async void SaveModal(string elementID)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("HideModal", elementID);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
            await module.InvokeAsync<string>("HideModal", elementID);   //--JS function
        }
    }
    @* -----------------------------CREATING A GROUP---------------------------------*@

    private DataAccessLibrary.Models.StudyGroup studyGroup = new DataAccessLibrary.Models.StudyGroup() { GroupDate = DateTime.Now };

    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        try
        {
            await studyGroupRepo.AddStudyGroupAsync(studyGroup);
            // Implement post-submission logic here (e.g., navigation or notification)
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            // Update the UI to inform the user
            errorMessage = "An error occurred while creating the study group. Please try again.";

        }
    }
}
