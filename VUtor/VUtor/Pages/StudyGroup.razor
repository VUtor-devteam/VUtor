@page "/studygroups"

@using DataAccessLibrary.Data
@using DataAccessLibrary.GenericRepo;
@using DataAccessLibrary.Models
@using DataAccessLibrary
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity;

@inject IGenericRepository<TopicEntity> repoGenericTopics
@inject IProfileRepository repoProfiles
@inject ApplicationDbContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ProfileEntity> userManager
@inject StudyGroupRepository studyGroupRepo
@inject NavigationManager navigationManger

@inject IJSRuntime JS;
@inject IConfiguration config


<h1>Study Groups</h1>

<div class="row">
    <div calss="col-lg-12"> 
        <button type="button" @onclick='eventArgs=>ShowModal("creationModal")' class="round_corners long btn btn-outline-secondary" data-toggle="modal" data-target="#creationModal">
            Create your own study group
        </button>
    </div>

    <div calss="col-lg-12">
        <!-- Create Modal -->
        <div class="modal fade show" id="creationModal" tabindex="-1" role="dialog" aria-labelledby="creationModal" aria-hidden="true" style="display:none; background: #00000080">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div>
                        <div class="publication gray_text">
                            New study group
                        </div>
                        <button type="button" @onclick='eventargs => HideModal("creationModal")' class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="form-floating mb-3"></div>
                    <div class="modal-body full">
                        <EditForm Model="@studyGroup" OnValidSubmit="@HandleValidSubmit">
                            <div>
                                <div class="edit_row_container mb-2">
                                    <div class="form-group mb-2 gray_text">
                                        <label for="groupDate">Group Date:</label>
                                        <InputDate id="groupDate" class="form-control round_corners" @bind-Value="@studyGroup.GroupDate" />
                                    </div>
                                    <div class="form-group mb-2 gray_text">
                                        <label for="groupPlace">Group Place:</label>
                                        <InputSelect id="groupPlace" class="form-control round_corners" @bind-Value="@studyGroup.GroupPlace" placeholder="Group place">
                                            <option value="true">Live</option>
                                            <option value="false">Online</option>
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="edit_row_container mb-2">
                                    <div class="form-group mb-2">
                                        <InputText id="subject" class="form-control round_corners" @bind-Value="@studyGroup.Subject" placeholder="Subject"/>
                                    </div>
                                </div>
                                <div class="form-floating mb-2 description">
                                    <textarea @bind="@studyGroup.Description" type="text" name="filter" class="description" placeholder="Enter a description" rows=" 10" cols="50" />
                                </div>
                            </div>

                            <div class="modal-footer edit_row_container">
                                <button type="submit" @onclick='eventargs => SaveModal("creationModal")' class="round_corners edit" data-dismiss="modal">Save</button>
                                <button type="button" @onclick='eventargs => HideModal("creationModal")' class="round_corners edit" data-dismiss="modal">Close</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* --------------------------------------------------------------*@
    <div calss="col-lg-12">
        <!-- Edit Modal -->
        <div class="modal fade show" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModal" aria-hidden="true" style="display:none; background: #00000080">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div>
                        <div class="publication gray_text">
                            Edit study group
                        </div>
                        <button type="button" @onclick='eventargs => HideModal("editModal")' class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="form-floating mb-3"></div>
                    <div class="modal-body full">
                        <EditForm Model="@studyGroup" OnValidSubmit="@HandleValidSubmitEdit">
                            <div>
                                <div class="edit_row_container mb-2">
                                    <div class="form-group mb-2 gray_text">
                                        <label for="groupDate">Group Date:</label>
                                        <InputDate id="groupDate" class="form-control round_corners" @bind-Value="@studyGroup.GroupDate" />
                                    </div>
                                    <div class="form-group mb-2 gray_text">
                                        <label for="groupPlace">Group Place:</label>
                                        <InputSelect id="groupPlace" class="form-control round_corners" @bind-Value="@studyGroup.GroupPlace" placeholder="Group place">
                                            <option value="true">Live</option>
                                            <option value="false">Online</option>
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="edit_row_container mb-2">
                                    <div class="form-group mb-2">
                                        <InputText id="subject" class="form-control round_corners" @bind-Value="@studyGroup.Subject" placeholder="Subject" />
                                    </div>
                                </div>
                                <div class="form-floating mb-2 description">
                                    <textarea @bind="@studyGroup.Description" type="text" name="filter" class="description" placeholder="Enter a description" rows=" 10" cols="50" />
                                </div>
                            </div>

                            <div class="modal-footer edit_row_container">
                                <button type="submit" @onclick='eventargs => EditModal("editModal")' class="round_corners edit" data-dismiss="modal">Save</button>
                                <button type="button" @onclick='eventargs => HideModal("editModal")' class="round_corners edit" data-dismiss="modal">Close</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>




</div>



@* --------------------------------------------------------------*@
@if (IsLoading)
{
    <div class="loading-overlay">
        <div class="loading-spinner">
            <div></div>
            <div></div>
            <div></div>
        </div>
    </div>
}else{
    @if (studyGroups == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="library_table">
            <thead>
                <tr>
                    <th class="library_th">Creator ID</th>
                    <th class ="library_th">Meeting Date</th>
                    <th class="library_th">Meeting Place</th>
                    <th class="library_th">Subject</th>
                    <th class="library_th">Member Count</th>
                    <th class="library_th">Become member</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (group, isMember) in studyGroupsWithMembership)
                {
                    <tr class="library_tr">
                        <td class="library_td" @onclick="() => GoToProfile(group.CreatorId)">@group.CreatorId</td>
                        <td class="library_td">@(DateOnly.FromDateTime(group.GroupDate))</td>
                        <td class="library_td">@(group.GroupPlace ? "Live" : "Online")</td>
                        <td class="library_td tooltip-custom">
                            @group.Subject
                            <span class="tooltip-text">@group.Description</span>
                        </td>
                        <td class="library_td">@group.MemberNumber</td>
                        <td class="library_td">
                            @if (group.CreatorId == userId)
                            {
                                <button class="round_corners short btn btn-danger delete" @onclick="() => DeleteStudyGroup(group.Id)">Delete</button>
                                <button class="round_corners short btn btn-danger edit" @onclick="() => OpenEditModal(group.Id)" data-toggle="modal" data-target="#editModal">Edit</button>
                            }
                            else
                            {
                                @if (isMember)
                                {
                                    <button class="round_corners btn btn-outline-secondary" @onclick="()=> LeaveStudyGroup(group.Id)">Leave Group</button>
                                }
                                else
                                {
                                    <button class="round_corners btn btn-outline-secondary" @onclick="()=> JoinStudyGroup(group.Id)">Join This Group</button>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<DataAccessLibrary.Models.StudyGroup> studyGroups;
    private List<(DataAccessLibrary.Models.StudyGroup studyGroup, bool isMember)> studyGroupsWithMembership;
    string userId = "null";
    public bool IsLoading { get; set; }

    private ProfileEntity visiterProfile;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        studyGroups = await studyGroupRepo.GetAllStudyGroupsAsync();
        userId = await GetUserId(); // Use await to get the result of the asynchronous method
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
        IsLoading = false;
    }

    private async Task JoinStudyGroup(int studyGroupId)
    {
        IsLoading = true;
        var userId = await GetUserId();
        await studyGroupRepo.AddMemberAsync(studyGroupId, userId);
        await UpdateMemberCount(studyGroupId);
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
        IsLoading = false;
    }

    private async Task LeaveStudyGroup(int studyGroupId)
    {
        IsLoading = true;
        var userId = await GetUserId();
        await studyGroupRepo.RemoveMemberAsync(studyGroupId, userId);
        await UpdateMemberCount(studyGroupId);
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
        IsLoading = false;
    }

    private async Task DeleteStudyGroup(int studyGroupId)
    {
        IsLoading = true;
        var userId = await GetUserId();
        await studyGroupRepo.DeleteStudyGroupAsync(studyGroupId);
        studyGroups = await studyGroupRepo.GetAllStudyGroupsAsync();
        studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
        IsLoading = false;
    }

    private async Task UpdateMemberCount(int studyGroupId)
    {
        IsLoading = true;
        var memberCount = await studyGroupRepo.GetMemberCountAsync(studyGroupId);
        var studyGroup = await studyGroupRepo.GetStudyGroupByIdAsync(studyGroupId);
        if (studyGroup != null)
        {
            studyGroup.MemberNumber = memberCount;
            await studyGroupRepo.UpdateStudyGroupAsync(studyGroup);
        }
        IsLoading = false;
    }

    private async Task IncrementMemberCount(int studyGroupId) //check if needed
    {
        IsLoading = true;
        var studyGroup = await studyGroupRepo.GetStudyGroupByIdAsync(studyGroupId);
        if (studyGroup != null)
        {
            studyGroup.MemberNumber++;
            await studyGroupRepo.UpdateStudyGroupAsync(studyGroup);
        }
        IsLoading = false;
    }

    private async Task DecrementMemberCount(int studyGroupId) //check if needed
    {
        IsLoading = true;
        var studyGroup = await studyGroupRepo.GetStudyGroupByIdAsync(studyGroupId);
        if (studyGroup != null && studyGroup.MemberNumber > 0)
        {
            studyGroup.MemberNumber--;
            await studyGroupRepo.UpdateStudyGroupAsync(studyGroup);
        }
        IsLoading = false;
    }

    private async Task<string> GetUserId()
    {
        IsLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var email = user.Identity.Name; // Assuming the email is used as the username
            visiterProfile = await repoProfiles.GetProfileByEmailAsync(email);
        }
        IsLoading = false;
        return visiterProfile.Id;

    }

    private async Task GoToProfile(string id)
    {
        navigationManger.NavigateTo($"profile/{id}");
    }
    @* --------------------------MODULE------------------------------------*@

    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender != null)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
        }
    }

    protected async void ShowModal(string elementID)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("showModal", elementID);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
            await module.InvokeAsync<string>("showModal", elementID);   //--JS function
        }
    }

    protected async void HideModal(string elementID)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("HideModal", elementID);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
            await module.InvokeAsync<string>("HideModal", elementID);   //--JS function
        }
    }

    protected async void SaveModal(string elementID)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("HideModal", elementID);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
            await module.InvokeAsync<string>("HideModal", elementID);   //--JS function
        }
    }

    protected async void EditModal(string elementID)
    {
        if (module != null)
        {
            await module.InvokeAsync<string>("HideModal", elementID);
        }
        else
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/StudyGroup.razor.js");
            await module.InvokeAsync<string>("HideModal", elementID);   //--JS function
        }
    }


    @* -----------------------------CREATING A GROUP---------------------------------*@

    private DataAccessLibrary.Models.StudyGroup studyGroup = new DataAccessLibrary.Models.StudyGroup() { GroupDate = DateTime.Now };

    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        try
        {
            IsLoading = true;
            studyGroup.CreatorId = await GetUserId();
            await studyGroupRepo.AddStudyGroupAsync(studyGroup, studyGroup.CreatorId);
            studyGroups = await studyGroupRepo.GetAllStudyGroupsAsync();
            await UpdateMemberCount(studyGroup.Id);
            studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);

            ResetStudyGroup();
            IsLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            errorMessage = "An error occurred while creating the study group. Please try again.";

        }
    }

    private void ResetStudyGroup()
    {
        // Reset the studyGroup object to its initial state or a new instance
        studyGroup = new DataAccessLibrary.Models.StudyGroup() { GroupDate = DateTime.Now };
    }

    @* -----------------------------EDITING A GROUP---------------------------------*@

    private async Task HandleValidSubmitEdit()
    {
        try
        {
            IsLoading = true;
            // Logic for updating an existing study group
            await studyGroupRepo.UpdateStudyGroupAsync(studyGroup);

            // Common post-update logic
            studyGroups = await studyGroupRepo.GetAllStudyGroupsAsync();
            studyGroupsWithMembership = await studyGroupRepo.GetStudyGroupsWithMembershipStatus(userId);
            ResetStudyGroup();
            HideModal("editModal"); // Close the edit modal
            IsLoading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            errorMessage = "An error occurred while updating the study group. Please try again.";
        }
    }

    private async Task OpenEditModal(int groupIdToEdit)
    {
        // Fetch the full details of the study group based on groupIdToEdit
        studyGroup = await studyGroupRepo.GetStudyGroupByIdAsync(groupIdToEdit);

        if (studyGroup != null)
        {
            ShowModal("editModal"); // Open the edit modal only if the study group is found
        }
        else
        {
            // Handle the case where the study group is not found (optional)
        }
    }
}

